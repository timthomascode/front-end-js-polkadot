{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","BlockInfo.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","Main","useState","blockInfo","setBlockInfo","useEffect","chain","subscribeNewHeads","head","e","getBlockInfo","Table","celled","striped","Header","Row","HeaderCell","colSpan","Body","Cell","number","toString","hash","parentHash","stateRoot","extrinsicsRoot","BlockInfo","system","version","text","Grid","centered","columns","padded","Column","Message","negative","compact","floating","header","content","JSON","stringify","Dimmer","active","Loader","size","contextRef","createRef","ref","Container","App","ReactDOM","render","document","getElementById"],"mappings":"ucAEMA,EAAYC,EAAQ,MAOpBC,EAJc,CAClB,4BACA,iCAE0BC,QAAO,SAACC,EAAKC,GAGvC,YADuBC,IAAnBC,yIAAYF,KAAkBD,EAAIC,EAAEG,MAAM,KAAOD,yIAAYF,IAC1DD,IACN,IAGYK,EADH,uCAAQC,GAAiBV,GAAcE,GCH7CS,EADcC,IAAYC,MAAMC,OAAOC,SAASC,QAClBC,KAAOR,EAAOS,gBAClDC,QAAQC,IAAR,4BAAiCT,IAKjC,IAAMU,EAAa,CACjBC,OAAQX,EACRY,QAAQ,2BAAMA,KAAYd,EAAOe,KACjCC,MAAOhB,EAAOiB,aACdC,QAAS,KACTC,aAAc,KACdC,IAAK,KACLC,SAAU,KACVC,SAAU,MAMNC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBF,SAAU,iBAE/B,IAAK,UACH,OAAO,2BAAKE,GAAZ,IAAmBJ,IAAKK,EAAOE,QAASL,SAAU,eAEpD,IAAK,kBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,UAE/B,IAAK,gBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,QAASD,SAAUI,EAAOE,UAEzD,IAAK,eACH,OAAO,2BAAKH,GAAZ,IAAmBL,aAAc,YAEnC,IAAK,cACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAASO,EAAOE,QAASR,aAAc,UAE5D,IAAK,gBACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAAS,KAAMC,aAAc,UAElD,QACE,MAAM,IAAIS,MAAJ,wBAA2BH,EAAOC,SA8B1CG,GAAY,EA4BVC,EAAmBC,IAAMC,gBAEzBC,EAA2B,SAACC,GAEhC,IAAMC,EAAS,eAAQvB,GACC,CAAC,SAAU,SACnBwB,SAAQ,SAAAC,GACtBF,EAAUE,GAA8B,qBAAfH,EAAMG,GAAuBF,EAAUE,GAAOH,EAAMG,MALrC,MAQhBC,qBAAWf,EAASY,GARJ,mBAQnCX,EARmC,KAQ5Be,EAR4B,KAY1C,OAjEc,SAACf,EAAOe,GAAc,IAC5BjB,EAAqCE,EAArCF,SAAUT,EAA2BW,EAA3BX,OAAQC,EAAmBU,EAAnBV,QAASE,EAAUQ,EAAVR,MAEnC,IAAIM,EAAJ,CAEAiB,EAAS,CAAEb,KAAM,iBAEjB,IAAMc,EAAW,IAAIC,aAAW5B,GAC1B6B,EAAO,IAAIC,aAAW,CAAEH,WAAUxB,QAAOR,IAAKM,IAGpD4B,EAAKE,GAAG,aAAa,WACnBL,EAAS,CAAEb,KAAM,UAAWC,QAASe,IAErCA,EAAKG,QAAQC,MAAK,SAACJ,GAAD,OAAUH,EAAS,CAAEb,KAAM,0BAE/CgB,EAAKE,GAAG,SAAS,kBAAML,EAAS,CAAEb,KAAM,uBACxCgB,EAAKE,GAAG,SAAS,SAAAG,GAAG,OAAIR,EAAS,CAAEb,KAAM,gBAAiBC,QAASoB,QA6CnEC,CAAQxB,EAAOe,GAtCI,SAACf,EAAOe,GAC3B,IAAMU,EAAiB,uCAAG,4BAAAC,EAAA,6DACxBX,EAAS,CAAEb,KAAM,iBADO,kBAGhByB,qBAAWnD,EAAOoD,UAHF,uBAIEC,yBAJF,OAKtBC,GADIA,EAJkB,QAKIC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,MAC3B,CAAED,UAASC,KAAK,2BAAMA,GAAP,IAAaC,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmBD,EAAKE,OAAxB,WACnCzC,IAAQ0C,QAAQ,CAAEC,cAAe7D,EAAO8D,qBAAuBR,GAC/Df,EAAS,CAAEb,KAAM,cAAeC,QAAST,MARnB,kDAUtBR,QAAQqD,MAAR,MACAxB,EAAS,CAAEb,KAAM,kBAXK,0DAAH,qDAiBvB,IAFyBF,EAAjBL,aAER,CAEA,GAAIU,EAAW,OAAOU,EAAS,CAAEb,KAAM,cAAeC,QAAST,MAG/DW,GAAY,EACZoB,KAeAe,CAAaxC,EAAOe,GAEb,kBAACT,EAAiBmC,SAAlB,CAA2BC,MAAO1C,GACtCU,EAAMiC,WAULC,EAAe,iCAAYC,qBAAWvC,K,UCtI5C,SAASwC,IAAS,IACRlD,EAAQgD,IAARhD,IADO,EAEmBmD,mBAAS,GAF5B,mBAERC,EAFQ,KAEGC,EAFH,KAuBf,OAnBAC,qBAAU,WAgBR,OAbkB,uCAAG,sBAAAxB,EAAA,sDACnB,IACE9B,EAAIZ,IAAImE,MAAMC,mBAAkB,SAACC,GAC/BJ,EAAaI,GACbnE,QAAQC,IAAIkE,MAEd,MAAOC,GACPpE,QAAQqD,MAAMe,GAPG,2CAAH,oDAWlBC,GAEO,kBAfgB,QAgBtB,CAAC3D,IAEGoD,EACL,kBAACQ,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,GACnB,kBAACF,EAAA,EAAMG,OAAP,KACE,kBAACH,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMK,WAAP,CAAkBC,QAAQ,KAA1B,8BAKJ,kBAACN,EAAA,EAAMO,KAAP,KACE,kBAACP,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMQ,KAAP,sBAGA,kBAACR,EAAA,EAAMQ,KAAP,KACIhB,EAAUiB,OAAOC,aAGvB,kBAACV,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMQ,KAAP,aAGA,kBAACR,EAAA,EAAMQ,KAAP,KACIhB,EAAUmB,KAAKD,aAGrB,kBAACV,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMQ,KAAP,4BAGA,kBAACR,EAAA,EAAMQ,KAAP,KACIhB,EAAUoB,WAAWF,aAG3B,kBAACV,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMQ,KAAP,mBAGA,kBAACR,EAAA,EAAMQ,KAAP,KACIhB,EAAUqB,UAAUH,aAG1B,kBAACV,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMQ,KAAP,wBAGA,kBAACR,EAAA,EAAMQ,KAAP,KACIhB,EAAUsB,eAAeJ,eAKjC,KAGS,SAASK,EAAW7D,GAAQ,IACjCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KACTY,EAAIZ,IAAIwF,OAAOC,QACb,kBAAC3B,EAASpC,GACR,KChFR,SAASoC,IAAS,IAGD4B,EAKCnD,EARD,EACgBqB,IAAvB9C,EADO,EACPA,SAAUD,EADH,EACGA,SAiBlB,GAAiB,UAAbC,EAAsB,OAVVyB,EAUyB1B,EATvC,kBAAC8E,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,EAAGC,QAAM,GAC/B,kBAACH,EAAA,EAAKI,OAAN,KACE,kBAACC,EAAA,EAAD,CAASC,UAAQ,EAACC,SAAO,EAACC,UAAQ,EAChCC,OAAO,gCACPC,QAAO,UAAKC,KAAKC,UAAUhE,EAAK,KAAM,QAMzC,GAAiB,UAAbzB,EAAsB,OAhBhB4E,EAgB8B,0BAf3C,kBAACc,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASjB,IAgB1B,IAAMkB,EAAaC,sBAEnB,OACE,yBAAKC,IAAKF,GACR,kBAACG,EAAA,EAAD,KACE,kBAACxB,EAAD,QAMO,SAASyB,IACtB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OCtCNC,IAASC,OAAO,kBAACF,EAAD,MACdG,SAASC,eAAe,U","file":"static/js/main.add229f3.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","import React, { useEffect, useState } from 'react';\nimport { Table } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main () {\n  const { api } = useSubstrate();\n  const [blockInfo, setBlockInfo] = useState(0);\n\n  useEffect(() => {\n    const unsubscribeAll = null;\n\n    const getBlockInfo = async () => {\n      try {\n        api.rpc.chain.subscribeNewHeads((head) => {\n          setBlockInfo(head);\n          console.log(head);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    getBlockInfo();\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api]);\n\n  return blockInfo ? (\n    <Table celled striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan='2'>\n            Latest Block Information\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            Block Height:\n          </Table.Cell>\n          <Table.Cell>\n            { blockInfo.number.toString() }\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            Hash\n          </Table.Cell>\n          <Table.Cell>\n            { blockInfo.hash.toString() }\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            Previous Block Hash\n          </Table.Cell>\n          <Table.Cell>\n            { blockInfo.parentHash.toString() }\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            State Root\n          </Table.Cell>\n          <Table.Cell>\n            { blockInfo.stateRoot.toString() }\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            Extrinsics Root\n          </Table.Cell>\n          <Table.Cell>\n            { blockInfo.extrinsicsRoot.toString() }\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  ) : null;\n}\n\nexport default function BlockInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\n\nimport BlockInfo from './BlockInfo';\n\nfunction Main () {\n  const { apiState, apiError } = useSubstrate();\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Container>\n        <BlockInfo />\n      </Container>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}